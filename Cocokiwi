---cocosploit solara v4.5 test

Players = game:GetService("Players")
Lighting = game:GetService("Lighting")
UserInputService = game:GetService("UserInputService")
LocalPlayer = Players.LocalPlayer
Character = LocalPlayer.Character
Humanoid = Character.Humanoid
PrimaryPart = Character.PrimaryPart
PlayerGui = LocalPlayer.PlayerGui
PlayerScripts = LocalPlayer.PlayerScripts
Camera = workspace.Camera
CurrentCamera = workspace.CurrentCamera
RunService = game["Run Service"]
TweenService = game.TweenService



local ReplicatedStorage = game:GetService("ReplicatedStorage")

local GuiLibrary = {Version = "1.0.3",CustomEdition = "",WindowCount = 0, API = {Windows = {},buttons = {}}}
local utilityToggles = {}
local entity = {gui = game.Players.LocalPlayer.PlayerGui,HumanoidRootPart=function() return game.Players.LocalPlayer.Character.PrimaryPart end}
local protectInstance = function(v) v.Name = math.random() end
local gui = Instance.new("ScreenGui",entity.gui)
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
protectInstance(gui)

local canSave = true


shared.AutumnLoaded = false


local config = {
	["Buttons"] = {},
	["Toggles"] = {},
	["Pickers"] = {}
}

local configPath = "CocoSploit_Solara/Configs/"..game.PlaceId..".json"
makefolder("CocoSploit_Solara")
makefolder("CocoSploit_Solara/Configs")
local function saveConfig()
	if canSave then
		if isfile(configPath) then
			delfile(configPath)
		end
		writefile(configPath,game.HttpService:JSONEncode(config))
	end
end

local function loadConfig()
	config = (game.HttpService:JSONDecode(readfile(configPath)))
end

if not isfile(configPath) then
	saveConfig()
	task.wait(1)
end

loadConfig()

task.wait(1)

local notificationFrame = Instance.new("Frame",gui)
notificationFrame.Size = UDim2.fromScale()

local Notifications = {}
function GuiLibrary.CreateNotification(title,text,time)

end

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()


function CreateNotification(Title, Duration, Message)
    Notification:Notify(
        {Title = Title, Description = Message},
        {OutlineColor = Color3.fromRGB(80, 80, 80), Time = Duration, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
    )
end

function CreateNotificationStaffDetector(Title, Duration, Message)
    sound = Instance.new("Sound",workspace)
    sound.Name = "Noooooooooooooooot noooooooooooooooooooooooot"
    sound.SoundId = "rbxassetid://7396762708"
    sound:Play()

    Notification:Notify(
        {Title = Title, Description = Message},
        {OutlineColor = Color3.fromRGB(255, 0, 0), Time = Duration, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=6031071053", ImageColor = Color3.fromRGB(255, 84, 84)}
    )
end

local notificationFrame = Instance.new("Frame",gui)
notificationFrame.Size = UDim2.fromScale()

local Notifications = {}
function GuiLibrary.CreateNotification(title,text,time)

end


-- Existing code for creating the GUI window

function GuiLibrary.CreateWindow(name)
    local top = Instance.new("TextLabel", gui)
    local UICorner = Instance.new("UICorner")
    GuiLibrary.WindowCount += 1
    top.Position = UDim2.fromScale(0.02 + (0.12 * GuiLibrary.WindowCount), 0.07)
    top.Size = UDim2.fromScale(0.1, 0.045)
    top.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
    top.BorderSizePixel = 0
    top.TextColor3 = Color3.fromRGB(0, 255, 0) -- 改为绿色
    top.TextXAlignment = Enum.TextXAlignment.Left
    top.TextSize = 12
    top.Text = "  " .. name
    top.Font = Enum.Font.Gotham

    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = top

    -- Function to toggle the visibility of all windows
    local function toggleAllWindows()
        for _, window in pairs(GuiLibrary.API.Windows) do
            window.top.Visible = not window.top.Visible
        end
    end

    -- Existing InputBegan connection to toggle UI with RightShift key
    game.UserInputService.InputBegan:Connect(function(key, gpe)
        if gpe then return end
        if key.KeyCode == Enum.KeyCode.RightShift then
            toggleAllWindows()
        end
    end)

    -- New button to toggle the visibility of all windows
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.CoreGui

    local CocokiwiButton = Instance.new("TextButton")
    CocokiwiButton.Name = "CocokiwiButton"
    CocokiwiButton.Parent = ScreenGui
    CocokiwiButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    CocokiwiButton.BackgroundTransparency = 0.5
    CocokiwiButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
    CocokiwiButton.BorderSizePixel = 0
    CocokiwiButton.Position = UDim2.new(0.95, 0, 0.3, 0)
    CocokiwiButton.Size = UDim2.new(0, 35, 0, 35)
    CocokiwiButton.Font = Enum.Font.SourceSans
    CocokiwiButton.Text = ""
    CocokiwiButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    CocokiwiButton.TextSize = 14.0

    local ButtonLogo = Instance.new("ImageLabel")
    ButtonLogo.Name = "ButtonLogo"
    ButtonLogo.Parent = CocokiwiButton
    ButtonLogo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ButtonLogo.BackgroundTransparency = 1.0
    ButtonLogo.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ButtonLogo.BorderSizePixel = 0
    ButtonLogo.Position = UDim2.new(0.1, 0, 0.1, 0)
    ButtonLogo.Size = UDim2.new(0.8, 0, 0.8, 0)
    ButtonLogo.Image = "rbxassetid://14483298187"

    CocokiwiButton.MouseButton1Down:Connect(toggleAllWindows)

    local moduleFrame = Instance.new("Frame", top)
    moduleFrame.BackgroundTransparency = 1
    moduleFrame.Size = UDim2.fromScale(1, 20)
    moduleFrame.Position = UDim2.fromScale(0, 1)
    local moduleSorter = Instance.new("UIListLayout", moduleFrame)
    moduleSorter.SortOrder = Enum.SortOrder.LayoutOrder
    GuiLibrary.API.buttons[name] = {}
    moduleFrame.ChildAdded:Connect(function(v)
        if not v:IsA("TextButton") then return end
        v.LayoutOrder = #moduleFrame:GetChildren()
    end)

    GuiLibrary.API.Windows[name] = {
        top = top,  -- Store top label for visibility control
        CreateButton = function(tab)
            if config.Buttons[tab["Name"]] == nil then
                config.Buttons[tab["Name"]] = {Enabled = false, Keybind = "Unknown"}
            end

            local button = Instance.new("TextButton", moduleFrame)
            button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            button.Size = UDim2.fromScale(1, 0.045)
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.TextXAlignment = Enum.TextXAlignment.Left
            button.Text = "  " .. tab["Name"]
            button.TextSize = 12
            button.Font = Enum.Font.Gotham
            button.BorderSizePixel = 0
            table.insert(GuiLibrary.API.buttons[name], button)

            local dropdownFrame = Instance.new("Frame", moduleFrame)
            dropdownFrame.Size = UDim2.fromScale(1, 1)
            dropdownFrame.BackgroundTransparency = 1
            dropdownFrame.Visible = false
            dropdownFrame.LayoutOrder = 900000000
            local dropdownFrameSorter = Instance.new("UIListLayout", dropdownFrame)

            local keybindButton = Instance.new("TextButton", dropdownFrame)
            keybindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            keybindButton.Size = UDim2.fromScale(1, 0.045)
            keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            keybindButton.TextXAlignment = Enum.TextXAlignment.Left
            keybindButton.Text = "  Keybind : "
            keybindButton.TextSize = 12
            keybindButton.Font = Enum.Font.Gotham
            keybindButton.BorderSizePixel = 0

            local keybind = Enum.KeyCode[tostring(config.Buttons[tab["Name"]].Keybind)]
            if keybind ~= Enum.KeyCode.Unknown then
                keybindButton.Text = "  Keybind : " .. tostring(config.Buttons[tab["Name"]].Keybind)
            end

            local keybindConnection
            keybindButton.MouseButton1Down:Connect(function()
                keybindConnection = game.UserInputService.InputBegan:Connect(function(key, gpe)
                    if gpe then return end
                    keybindButton.Text = "  Keybind : " .. tostring(key.KeyCode):split(".")[3]
                    config.Buttons[tab["Name"]].Keybind = tostring(key.KeyCode):split(".")[3]
                    task.wait(0.06)
                    saveConfig()
                    keybind = key.KeyCode
                    keybindConnection:Disconnect()
                end)
            end)

            local btn
            btn = {
                Enabled = false,
                ToggleButton = function(t)
                    tab["Function"](t)
                    btn.Enabled = t
                    button.TextColor3 = (t and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)) -- 改为绿色
                    arraylist(t, tab["Name"], tab["Extratext"])
                    config.Buttons[tab["Name"]].Enabled = t
                    task.wait(0.005)
                    saveConfig()
                end,
                CreateToggle = function(tab2)
                    if config.Toggles[tab2["Name"] .. tab["Name"]] == nil then
                        config.Toggles[tab2["Name"] .. tab["Name"]] = {Enabled = false}
                    end

                    local button = Instance.new("TextButton", dropdownFrame)
                    button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    button.Size = UDim2.fromScale(1, 0.045)
                    button.TextColor3 = Color3.fromRGB(255, 255, 255)
                    button.TextXAlignment = Enum.TextXAlignment.Left
                    button.Text = "  " .. tab2["Name"]
                    button.TextSize = 12
                    button.Font = Enum.Font.Gotham
                    button.BorderSizePixel = 0
                    local state = {Enabled = false}
                    button.MouseButton1Down:Connect(function()
                        state.Enabled = not state.Enabled
                        button.TextColor3 = (state.Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)) -- 改为绿色
                        if tab2["Function"] then
                            tab2["Function"](state.Enabled)
                        end
                        config.Toggles[tab2["Name"] .. tab["Name"]].Enabled = state.Enabled
                        task.wait(0.06)
                        saveConfig()
                    end)
                    task.spawn(function()
                        if config.Toggles[tab2["Name"] .. tab["Name"]].Enabled then
                            repeat task.wait() until shared.AutumnLoaded == true
                            state.Enabled = true
                            button.TextColor3 = (state.Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)) -- 改为绿色
                            if tab2["Function"] then
                                tab2["Function"](state.Enabled)
                            end
                        end
                    end)
                    return state
                end,
                CreatePicker = function(tab2)
                    if config.Pickers[tab2["Name"] .. tab["Name"]] == nil then
                        config.Pickers[tab2["Name"] .. tab["Name"]] = {Value = tab2["Options"][1]}
                    end

                    local button = Instance.new("TextButton", dropdownFrame)
                    button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    button.Size = UDim2.fromScale(1, 0.045)
                    button.TextColor3 = Color3.fromRGB(255, 255, 255)
                    button.TextXAlignment = Enum.TextXAlignment.Left
                    button.Text = "  " .. tab2["Name"] .. ": " .. tab2["Options"][1]
                    button.TextSize = 12
                    button.Font = Enum.Font.Gotham
                    button.BorderSizePixel = 0
                    local state = {Value = tab2["Options"][1]}
                    local index = 1
                    button.MouseButton1Down:Connect(function()
                        index = (index + 1)
                        if index > #tab2["Options"] then
                            index = 1
                        end
                        if tab2["Function"] then
                            tab2["Function"](tab2["Options"][index])
                        end
                        button.Text = "  " .. tab2["Name"] .. " : " .. tab2["Options"][index]
                        state.Value = tab2["Options"][index]
                        config.Pickers[tab2["Name"] .. tab["Name"]].Value = tab2["Options"][index]
                        task.wait(0.06)
                        saveConfig()
                    end)
                    task.spawn(function()
                        repeat
                            task.wait()
                            index = (index + 1)
                            if index > #tab2["Options"] then
                                index = 1
                            end
                            if tab2["Function"] then
                                tab2["Function"](tab2["Options"][index])
                            end
                            button.Text = "  " .. tab2["Name"] .. " : " .. tab2["Options"][index]
                            state.Value = tab2["Options"][index]
                        until state.Value == config.Pickers[tab2["Name"] .. tab["Name"]].Value
                    end)
                    return state
                end,
            }

            utilityToggles[tab["Name"]] = function(t)
                btn.ToggleButton(t)
            end

            button.MouseButton1Down:Connect(function()
                btn.ToggleButton(not btn.Enabled)
            end)

            if config.Buttons[tab["Name"]].Enabled then
                task.spawn(function()
                    repeat task.wait() until shared.AutumnLoaded == true
                    btn.ToggleButton(true)
                end)
            end

            game.UserInputService.InputBegan:Connect(function(key, gpe)
                if gpe or not canSave then return end
                if key.KeyCode == Enum.KeyCode.Unknown then return end
                if key.KeyCode == keybind then
                    btn.ToggleButton(not btn.Enabled)
                end
            end)

            button.MouseButton2Down:Connect(function()
                dropdownFrame.Visible = not dropdownFrame.Visible
                for i, v in pairs(GuiLibrary.API.buttons[name]) do
                    v.Visible = not dropdownFrame.Visible
                end
                button.Visible = true
            end)

            return btn
        end,
    }
end


GuiLibrary.CreateWindow("Combat")
GuiLibrary.CreateWindow("Blatant")
GuiLibrary.CreateWindow("Utility")
GuiLibrary.CreateWindow("World")
GuiLibrary.CreateWindow("Gui")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local KnitClient = debug.getupvalue(require(LocalPlayer.PlayerScripts.TS.knit).setup, 6)
local TweenService = game:GetService("TweenService")
local Camera = game:GetService("Workspace").CurrentCamera
local RunService = game:GetService("RunService")
bedwars = {
["ClientHandlerStore"] = require(LocalPlayer.PlayerScripts.TS.ui.store).ClientStore, ["SwordController"] = KnitClient.Controllers.SwordController,
["CombatConstant"] = require(game:GetService("ReplicatedStorage").TS.combat["combat-constant"]).CombatConstant,
["CombatController"] = KnitClient.Controllers.CombatController,
["KnockbackTable"] = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.damage["knockback-util"]).KnockbackUtil.calculateKnockbackVelocity, 1),
["SprintController"] = KnitClient.Controllers.SprintController,
["DamageIndicator"] = KnitClient.Controllers.DamageIndicatorController.spawnDamageIndicator
}
function SetCamera(Camera)
   workspace.CurrentCamera.CameraSubject = Camera
end
function IsAlive(plr)
   plr = plr or LocalPlayer
       if not plr.Character then return false end        
       if not plr.Character:FindFirstChild("Head") then return false end
       if not plr.Character:FindFirstChild("Humanoid") then return false end
       if plr.Character:FindFirstChild("Humanoid").Health < 0.11 then return false end
   return true
end
function GetClosestPlayer()
   local target = nil
   local distance = math.huge
   for i,v in next, Players:GetPlayers() do
       if v.Team ~= LocalPlayer.Team and IsAlive(v) and not v.Character:FindFirstChildOfClass("ForceField") then
           local plrdist = LocalPlayer:DistanceFromCharacter(v.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame.p)
           if plrdist < distance then
               target = v
               distance = plrdist
           end
       end
   end
return target
end
function GetBeds()
    local beds = {}
    for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
        if string.lower(v.Name) == "bed" and v:FindFirstChild("Covers") ~= nil and v:FindFirstChild("Covers").Color ~= LocalPlayer.Team.TeamColor then
            table.insert(beds,v)
        end
    end
    return beds
end
function getserverpos(Position)
    local x = math.round(Position.X/3)
    local y = math.round(Position.Y/3)
    local z = math.round(Position.Z/3)
    return Vector3.new(x,y,z)
end
function GetMatchState()
    return bedwars["ClientHandlerStore"]:getState().Game.matchState
end
function GetQueueType()
    local state = bedwars["ClientHandlerStore"]:getState()
    return state.Game.queueType or "bedwars_test"
 end
local function GetInventory(plr)
   if not plr then 
       return {items = {}, armor = {}}
   end

   local suc, ret = pcall(function() 
       return require(game:GetService("ReplicatedStorage").TS.inventory["inventory-util"]).InventoryUtil.getInventory(plr)
   end)

   if not suc then 
       return {items = {}, armor = {}}
   end
   if plr.Character and plr.Character:FindFirstChild("InventoryFolder") then 
       local invFolder = plr.Character:FindFirstChild("InventoryFolder").Value
       if not invFolder then return ret end
       for i,v in next, ret do 
           for i2, v2 in next, v do 
               if typeof(v2) == 'table' and v2.itemType then
                   v2.instance = invFolder:FindFirstChild(v2.itemType)
               end
           end
           if typeof(v) == 'table' and v.itemType then
               v.instance = invFolder:FindFirstChild(v.itemType)
           end
       end
   end

   return ret
end
local BedwarsSwords = require(game:GetService("ReplicatedStorage").TS.games.bedwars["bedwars-swords"]).BedwarsMelees
function hashFunc(vec)
    return {value = vec}
end
local function getSword()
   local highest, returning = -9e9, nil
   for i,v in next, GetInventory(LocalPlayer).items do 
       local swords = table.find(BedwarsSwords, v.itemType)
       if not swords then continue end
       if swords > highest then 
           returning = v
           highest = swords
       end
   end
   return returning
end
local function getItemNear(itemName)
	for slot, item in next, GetInventory(LocalPlayer).items do
		if item.itemType == itemName or item.itemType:find(itemName) then
			return item, slot
		end
	end
	return nil
end
local function switchItem(tool)
	if LocalPlayer.Character.HandInvItem.Value ~= tool then
        game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.SetInvItem:InvokeServer({
			hand = tool
		})
	end
end
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local KnitClient = debug.getupvalue(require(LocalPlayer.PlayerScripts.TS.knit).setup, 6)
local TweenService = game:GetService("TweenService")
local Camera = game:GetService("Workspace").CurrentCamera
local RunService = game:GetService("RunService")
bedwars = {
["ClientHandlerStore"] = require(LocalPlayer.PlayerScripts.TS.ui.store).ClientStore, ["SwordController"] = KnitClient.Controllers.SwordController,
["CombatConstant"] = require(game:GetService("ReplicatedStorage").TS.combat["combat-constant"]).CombatConstant,
["CombatController"] = KnitClient.Controllers.CombatController,
["KnockbackTable"] = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.damage["knockback-util"]).KnockbackUtil.calculateKnockbackVelocity, 1),
["SprintController"] = KnitClient.Controllers.SprintController,
["DamageIndicator"] = KnitClient.Controllers.DamageIndicatorController.spawnDamageIndicator
}
function SetCamera(Camera)
   workspace.CurrentCamera.CameraSubject = Camera
end
function IsAlive(plr)
   plr = plr or LocalPlayer
       if not plr.Character then return false end        
       if not plr.Character:FindFirstChild("Head") then return false end
       if not plr.Character:FindFirstChild("Humanoid") then return false end
       if plr.Character:FindFirstChild("Humanoid").Health < 0.11 then return false end
   return true
end
function GetClosestPlayer()
   local target = nil
   local distance = math.huge
   for i,v in next, Players:GetPlayers() do
       if v.Team ~= LocalPlayer.Team and IsAlive(v) and not v.Character:FindFirstChildOfClass("ForceField") then
           local plrdist = LocalPlayer:DistanceFromCharacter(v.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame.p)
           if plrdist < distance then
               target = v
               distance = plrdist
           end
       end
   end
return target
end
function GetBeds()
    local beds = {}
    for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
        if string.lower(v.Name) == "bed" and v:FindFirstChild("Covers") ~= nil and v:FindFirstChild("Covers").Color ~= LocalPlayer.Team.TeamColor then
            table.insert(beds,v)
        end
    end
    return beds
end
function getserverpos(Position)
    local x = math.round(Position.X/3)
    local y = math.round(Position.Y/3)
    local z = math.round(Position.Z/3)
    return Vector3.new(x,y,z)
end
function GetMatchState()
    return bedwars["ClientHandlerStore"]:getState().Game.matchState
end
function GetQueueType()
    local state = bedwars["ClientHandlerStore"]:getState()
    return state.Game.queueType or "bedwars_test"
 end
local function GetInventory(plr)
   if not plr then 
       return {items = {}, armor = {}}
   end

   local suc, ret = pcall(function() 
       return require(game:GetService("ReplicatedStorage").TS.inventory["inventory-util"]).InventoryUtil.getInventory(plr)
   end)

   if not suc then 
       return {items = {}, armor = {}}
   end
   if plr.Character and plr.Character:FindFirstChild("InventoryFolder") then 
       local invFolder = plr.Character:FindFirstChild("InventoryFolder").Value
       if not invFolder then return ret end
       for i,v in next, ret do 
           for i2, v2 in next, v do 
               if typeof(v2) == 'table' and v2.itemType then
                   v2.instance = invFolder:FindFirstChild(v2.itemType)
               end
           end
           if typeof(v) == 'table' and v.itemType then
               v.instance = invFolder:FindFirstChild(v.itemType)
           end
       end
   end

   return ret
end
local BedwarsSwords = require(game:GetService("ReplicatedStorage").TS.games.bedwars["bedwars-swords"]).BedwarsMelees
function hashFunc(vec)
    return {value = vec}
end
local function getSword()
   local highest, returning = -9e9, nil
   for i,v in next, GetInventory(LocalPlayer).items do 
       local swords = table.find(BedwarsSwords, v.itemType)
       if not swords then continue end
       if swords > highest then 
           returning = v
           highest = swords
       end
   end
   return returning
end
local function getItemNear(itemName)
	for slot, item in next, GetInventory(LocalPlayer).items do
		if item.itemType == itemName or item.itemType:find(itemName) then
			return item, slot
		end
	end
	return nil
end
local function switchItem(tool)
	if LocalPlayer.Character.HandInvItem.Value ~= tool then
        game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.SetInvItem:InvokeServer({
			hand = tool
		})
	end
end
local SwordAnimations = {
    ["Slow"] = {
        {CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(220), math.rad(100), math.rad(100)),Time = 0.25},
        {CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.25}
    }
}

local origC0 = game:GetService("ReplicatedStorage").Assets.Viewmodel.RightHand.RightWrist.C0

Aura = GuiLibrary.API.Windows.Blatant.CreateButton({
    ["Name"] = "KillAura",
    ["Function"] = function(callback)
        EnabledKillaura = callback
        if EnabledKillaura then 
            repeat
                task.wait()
            until GetMatchState() ~= 0
            
            if not EnabledKillaura then
                return
            end
            
            while task.wait() do
                for i, v in pairs(game:GetService("Players"):GetChildren()) do
                    if v.Team ~= LocalPlayer.Team and IsAlive(v) and IsAlive(LocalPlayer) and not v.Character:FindFirstChildOfClass("ForceField") then
                        local Magnitude = (v.Character:FindFirstChild("HumanoidRootPart").Position - LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude
                        if Magnitude < KillauraRange then
                            Sword = getSword()
                            switchItem(Sword.tool)
                            
                            if Sword ~= nil then
                                KillauraSpeed = true
                                spawn(function()
                                    local anim = Instance.new("Animation")
                                    anim.AnimationId = "rbxassetid://4947108314"
                                    local loader = LocalPlayer.Character:FindFirstChild("Humanoid"):FindFirstChild("Animator")
                                    loader:LoadAnimation(anim):Play()
                                    
                                    CostumAnimations = true
                                    if CostumAnimations then
                                        CostumAnimations = false
                                        for i,v in pairs(SwordAnimations["Slow"]) do
                                            game:GetService("TweenService"):Create(Camera.Viewmodel.RightHand.RightWrist, TweenInfo.new(v.Time), {C0 = origC0 * v.CFrame}):Play()
                                            task.wait(v.Time - 0.01)
                                        end
                                        CostumAnimations = true
                                    end
                                end)
                                
                                game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.SwordHit:FireServer({
                                    ["chargedAttack"] = {["chargeRatio"] = 0},
                                    ["entityInstance"] = v.Character,
                                    ["validate"] = {
                                        ["targetPosition"] = hashFunc(v.Character:FindFirstChild("HumanoidRootPart").Position),
                                        ["selfPosition"] = hashFunc(LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position + ((LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude > 14 and (CFrame.lookAt(LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position, v.Character:FindFirstChild("HumanoidRootPart").Position).LookVector * 4) or Vector3.new(0, 0, 0))),
                                    }, 
                                    ["weapon"] = Sword.tool,
                                })
                            else
                                KillauraSpeed = false
                            end
                        else
                            KillauraSpeed = false
                        end
                    end
                end
            end
        else
            KillauraSpeed = false
        end
    end
})


local TweenService = game:GetService("TweenService")
local NeonWaterMark = Instance.new("ScreenGui")
local TextLabel = Instance.new("TextLabel")
local UITextSizeConstraint = Instance.new("UITextSizeConstraint")

NeonWaterMark.Name = "NeonWaterMark"
NeonWaterMark.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
NeonWaterMark.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
NeonWaterMark.ResetOnSpawn = false

TextLabel.Parent = NeonWaterMark
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(0, 0, 0, 0)
TextLabel.Size = UDim2.new(0.2, 0, 0.15, 0)
TextLabel.Font = Enum.Font.RobotoMono
TextLabel.Text = "Coco Kiwi Solara discord.gg/FqrVKaHnaw"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.TextSize = 28.000
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Add UITextSizeConstraint for dynamic text sizing
UITextSizeConstraint.MaxTextSize = 28
UITextSizeConstraint.MinTextSize = 14
UITextSizeConstraint.Parent = TextLabel

-- Tweening function for rainbow color change
local function changeColor()
    local rainbowColor = Color3.fromHSV(tick() % 5 / 5, 1, 1)
    local info = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local tween = TweenService:Create(TextLabel, info, {TextColor3 = rainbowColor})
    tween:Play()
end

-- Run the color change function in a loop
while true do
    changeColor()
    wait(1) -- Adjust the wait time for a smoother or faster color change
end
